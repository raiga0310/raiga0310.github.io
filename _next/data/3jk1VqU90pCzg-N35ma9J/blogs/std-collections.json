{"pageProps":{"markdown":"# Module std::collections (wip)\n\n## 概要\n`Collection`型｡\nRustの標準のコレクションライブラリは､もっとも汎用的な目的でのプログラミングデータ構造の効率的な実装を提供します｡標準的な実装を使うことで､大規模なデータの変換(原語:`significant data conversion`)を行うことなくライブラリ間での通信を可能にします｡\n\n誤解の無いように述べると､おそらく`Vec`と`HashMap`を使うべきです｡これら2つのコレクションは､一般的なデータストレージと処理のユースケースを網羅します｡その他の標準ライブラリのもつコレクションは特定の目的のために最適な選択ですが､それらの場合は(`Vec`や`HashMap`と)比較するとニッチであることが多いです｡技術的に次善策であるところの`Vec`や`HashMap`でさえ､始めるに当たって十分な選択肢となるでしょう｡\n\nRustのコレクションは以下の4つの主要なカテゴリに分類されます｡\n\n- シーケンス: `Vec`, `VecDeque`, `LinkedList`\n- 連想配列: `HashMap`, `BTreeMap`\n- セット: `HashSet`, `BTreeSet`\n- その他: `BinaryHeap`\n\n## When Should You Use Which Collection? (いつどのコレクションを使うべきか?)\n\n### `Vec`\n\n‐ 処理や送信のために要素を数え上げたいとき､または要素の値について整列されているかどうかを気にしない時\n‐ 特定の順序のシーケンスが求められ､かつ末尾(またはその近く)に要素が追加されるとき\n- スタックを使いたいとき\n- 可変長配列を使いたいとき\n- ヒープにデータが確保される配列を使いたいとき\n\n### `VecDeque`\n\n- シーケンスの両端における効率的な挿入をサポートする`Vec`を使いたいとき\n- キューを使いたいとき\n‐ デキューを使いたいとき\n\n### `LinkedList`\n\n- サイズが不明でかつ償却(操作コストの平準化)を許容しないシーケンスを使いたいとき\n- 効率的な分割や追加のあるリストを使いたいとき\n- 90"},"__N_SSG":true}